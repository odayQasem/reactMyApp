{"ast":null,"code":"import _classCallCheck from \"/home/user/oday_data/react/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/oday_data/react/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/oday_data/react/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/oday_data/react/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/oday_data/react/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/user/oday_data/react/my-app/src/component/tableBootstrap.jsx\";\nimport React, { Component } from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport \"font-awesome/css/font-awesome.min.css\";\n\nfunction getCaret(direction) {\n  if (direction === 'asc') {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \" asc\");\n  }\n\n  if (direction === 'desc') {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \" desc\");\n  }\n\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \" asc/desc\");\n}\n\nfunction onAfterInsertRow(row) {\n  var newRowStr = '';\n\n  for (var prop in row) {\n    newRowStr += prop + ': ' + row[prop] + ' \\n';\n  }\n\n  alert('The new row is:\\n ' + newRowStr);\n}\n\nfunction onRowSelect(row, isSelected, e) {\n  var rowStr = '';\n\n  for (var prop in row) {\n    rowStr += prop + ': \"' + row[prop] + '\"';\n  }\n\n  console.log(e);\n  alert(\"is selected: \".concat(isSelected, \", \").concat(rowStr));\n}\n\nfunction onSelectAll(isSelected, rows) {\n  alert(\"is select all: \".concat(isSelected));\n\n  if (isSelected) {\n    alert('Current display and selected data: ');\n  } else {\n    alert('unselect rows: ');\n  }\n\n  for (var i = 0; i < rows.length; i++) {\n    alert(rows[i].id);\n  }\n}\n\nfunction onAfterDeleteRow(rowKeys) {\n  alert('The rowkey you drop: ' + rowKeys);\n} // function customConfirm(next, dropRowKeys) {\n//   const dropRowKeysStr = dropRowKeys.join(',');\n//   if (confirm('Are you sure you want to delete ${dropRowKeysStr}?')) {\n//     // If the confirmation is true, call the function that\n//     // continues the deletion of the record.\n//     next();\n//   }\n// }\n\n\nfunction onAfterSaveCell(row, cellName, cellValue) {\n  alert(\"Save cell \".concat(cellName, \" with value \").concat(cellValue));\n  var rowStr = '';\n\n  for (var prop in row) {\n    rowStr += prop + ': ' + row[prop] + '\\n';\n  }\n\n  alert('Thw whole row :\\n' + rowStr);\n}\n\nfunction onBeforeSaveCell(row, cellName, cellValue) {\n  // You can do any validation on here for editing value,\n  // return false for reject the editing\n  return true;\n}\n\nvar rowTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(rowTable, _Component);\n\n  function rowTable(props) {\n    var _this;\n\n    _classCallCheck(this, rowTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(rowTable).call(this, props));\n\n    _this.createCustomModalFooter = function (onClose, onSave) {\n      var style = {\n        backgroundColor: '#ffffff'\n      };\n      return React.createElement(\"div\", {\n        className: \"modal-footer\",\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-xs btn-info\",\n        onClick: onSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Add\"), React.createElement(\"button\", {\n        className: \"btn btn-xs btn-danger\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Close \"));\n    };\n\n    _this.createCustomClearButton = function (onClick) {\n      return React.createElement(\"button\", {\n        className: \"btn btn-info\",\n        style: _this.ColorBlock(),\n        onClick: onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Clean\");\n    };\n\n    _this.options = {\n      defaultSortName: 'age',\n      // default sort column name\n      defaultSortOrder: 'desc',\n      // default sort order\n      onSortChange: _this.onSortChange,\n      afterInsertRow: onAfterInsertRow,\n      afterDeleteRow: onAfterDeleteRow,\n      insertModalHeader: _this.createCustomModalHeader,\n      insertModalFooter: _this.createCustomModalFooter,\n      clearSearchBtn: _this.createCustomClearButton,\n      clearSearch: true\n    };\n    return _this;\n  }\n\n  _createClass(rowTable, [{\n    key: \"onSortChange\",\n    value: function onSortChange(sortName, sortOrder) {\n      console.info('onSortChange', arguments);\n    }\n  }, {\n    key: \"ColorBlock\",\n    value: function ColorBlock() {\n      var styles = {\n        'height': '84%'\n      };\n      return styles;\n    }\n  }, {\n    key: \"createCustomModalHeader\",\n    value: function createCustomModalHeader(onClose, onSave) {\n      var headerStyle = {\n        fontWeight: 'bold',\n        fontSize: 'large',\n        textAlign: 'center',\n        backgroundColor: '#eeeeee'\n      };\n      return React.createElement(\"div\", {\n        className: \"modal-header\",\n        style: headerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Add Employee\"), React.createElement(\"button\", {\n        className: \"btn btn-info\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Close it!\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cellEditProp = {\n        mode: 'click',\n        blurToSave: true,\n        beforeSaveCell: onBeforeSaveCell,\n        // a hook for before saving cell\n        afterSaveCell: onAfterSaveCell // a hook for after saving cell\n\n      };\n      var selectRowProp = {\n        mode: 'checkbox',\n        clickToSelect: true,\n        //unselectable: [ 1, 3 ],\n        showOnlySelected: true,\n        selected: [2],\n        onSelect: onRowSelect,\n        onSelectAll: onSelectAll,\n        bgColor: function bgColor(row, isSelect) {\n          return 'yellow'; // if (isSelect) {\n          //   const { id } = row;\n          //   if (id < 5) return 'yellow';\n          //   else if (id < 4) return 'red';\n          //   else return 'yellow';\n          // }\n          // return null;\n        }\n      };\n      var classes = \"table table-sm table-striped table-hover table-bordered\";\n      return React.createElement(\"div\", {\n        className: \"table-responsive-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(BootstrapTable, {\n        selectRow: selectRowProp,\n        tableHeaderClass: this.classes,\n        trClassName: this.classes,\n        TableHeaderColumn: this.classes,\n        tableBodyClass: this.classes,\n        containerClass: this.classes,\n        tableContainerClass: this.classes,\n        headerContainerClass: this.classes,\n        bodyContainerClass: this.classes,\n        cellEdit: cellEditProp,\n        multiColumnSort: 2,\n        options: this.options,\n        search: true,\n        deleteRow: true,\n        insertRow: true,\n        data: this.props.data,\n        striped: true,\n        hover: true,\n        pagination: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        autoValue: true,\n        width: \"90\",\n        tdStyle: {\n          whiteSpace: 'normal'\n        },\n        thStyle: {\n          'fontWeight': 'lighter'\n        },\n        headerAlign: \"center\",\n        dataAlign: \"center\",\n        isKey: true,\n        dataField: \"id\",\n        caretRender: getCaret,\n        dataSort: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Employee ID\"), React.createElement(TableHeaderColumn, {\n        width: \"200\",\n        tdStyle: {\n          whiteSpace: 'normal'\n        },\n        thStyle: {\n          'fontWeight': 'lighter'\n        },\n        headerAlign: \"center\",\n        dataAlign: \"center\",\n        filter: {\n          type: 'TextFilter',\n          delay: 500\n        },\n        dataField: \"name\",\n        dataSort: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Employee Name\"), React.createElement(TableHeaderColumn, {\n        width: \"150\",\n        tdStyle: {\n          whiteSpace: 'normal'\n        },\n        thStyle: {\n          'fontWeight': 'lighter'\n        },\n        headerAlign: \"center\",\n        dataAlign: \"center\",\n        filter: {\n          type: 'NumberFilter',\n          delay: 1000,\n          numberComparators: ['=', '>', '<=']\n        },\n        dataField: \"name\",\n        dataSort: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Employee Age\"), React.createElement(TableHeaderColumn, {\n        width: \"150\",\n        dataField: \"active\",\n        editable: {\n          type: 'checkbox',\n          options: {\n            values: 'Active:InActive'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Active\")));\n    }\n  }]);\n\n  return rowTable;\n}(Component);\n\nexport default rowTable;","map":{"version":3,"sources":["/home/user/oday_data/react/my-app/src/component/tableBootstrap.jsx"],"names":["React","Component","BootstrapTable","TableHeaderColumn","getCaret","direction","onAfterInsertRow","row","newRowStr","prop","alert","onRowSelect","isSelected","e","rowStr","console","log","onSelectAll","rows","i","length","id","onAfterDeleteRow","rowKeys","onAfterSaveCell","cellName","cellValue","onBeforeSaveCell","rowTable","props","createCustomModalFooter","onClose","onSave","style","backgroundColor","createCustomClearButton","onClick","ColorBlock","options","defaultSortName","defaultSortOrder","onSortChange","afterInsertRow","afterDeleteRow","insertModalHeader","createCustomModalHeader","insertModalFooter","clearSearchBtn","clearSearch","sortName","sortOrder","info","arguments","styles","headerStyle","fontWeight","fontSize","textAlign","cellEditProp","mode","blurToSave","beforeSaveCell","afterSaveCell","selectRowProp","clickToSelect","showOnlySelected","selected","onSelect","bgColor","isSelect","classes","data","whiteSpace","type","delay","numberComparators","values"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport  { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport \"font-awesome/css/font-awesome.min.css\";\n\nfunction getCaret(direction) {\n    if (direction === 'asc') {\n      return (\n        <span> asc</span>\n      );\n    }\n    if (direction === 'desc') {\n      return (\n        <span> desc</span>\n      );\n    }\n    return (\n      <span> asc/desc</span>\n    );\n  }\n\n  function onAfterInsertRow(row) {\n    let newRowStr = '';\n  \n    for (const prop in row) {\n      newRowStr += prop + ': ' + row[prop] + ' \\n';\n    }\n    alert('The new row is:\\n ' + newRowStr);\n  }\n\n  function onRowSelect(row, isSelected, e) {\n    let rowStr = '';\n    for (const prop in row) {\n      rowStr += prop + ': \"' + row[prop] + '\"';\n    }\n    console.log(e);\n    alert(`is selected: ${isSelected}, ${rowStr}`);\n  }\n  \n  function onSelectAll(isSelected, rows) {\n    alert(`is select all: ${isSelected}`);\n    if (isSelected) {\n      alert('Current display and selected data: ');\n    } else {\n      alert('unselect rows: ');\n    }\n    for (let i = 0; i < rows.length; i++) {\n      alert(rows[i].id);\n    }\n  }\n\n  function onAfterDeleteRow(rowKeys) {\n    alert('The rowkey you drop: ' + rowKeys);\n  }\n\n\n  // function customConfirm(next, dropRowKeys) {\n  //   const dropRowKeysStr = dropRowKeys.join(',');\n  //   if (confirm('Are you sure you want to delete ${dropRowKeysStr}?')) {\n  //     // If the confirmation is true, call the function that\n  //     // continues the deletion of the record.\n  //     next();\n  //   }\n  // }\n\nfunction onAfterSaveCell(row, cellName, cellValue) {\n    alert(`Save cell ${cellName} with value ${cellValue}`);\n  \n    let rowStr = '';\n    for (const prop in row) {\n      rowStr += prop + ': ' + row[prop] + '\\n';\n    }\n  \n    alert('Thw whole row :\\n' + rowStr);\n  }\n  \n  function onBeforeSaveCell(row, cellName, cellValue) {\n    // You can do any validation on here for editing value,\n    // return false for reject the editing\n    return true;\n  }\n  \n\nclass rowTable extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.options = {\n          defaultSortName: 'age',  // default sort column name\n          defaultSortOrder: 'desc',  // default sort order\n          onSortChange: this.onSortChange,\n          afterInsertRow: onAfterInsertRow ,\n          afterDeleteRow: onAfterDeleteRow,\n          insertModalHeader: this.createCustomModalHeader,\n          insertModalFooter: this.createCustomModalFooter,\n          clearSearchBtn: this.createCustomClearButton,\n          clearSearch: true\n        };\n     }\n\n\n    onSortChange(sortName, sortOrder) {\n        console.info('onSortChange', arguments);\n    }\n\n    createCustomModalFooter = (onClose, onSave) => {\n        const style = {\n          backgroundColor: '#ffffff'\n        };\n        return (\n          <div className='modal-footer' style={ style }>\n            \n            <button className='btn btn-xs btn-info' onClick={ onSave }>Add</button>\n            <button className='btn btn-xs btn-danger' onClick={ onClose }>Close </button>\n          </div>\n        );\n      }\n\n      ColorBlock() {\n        let styles = {\n            'height': '84%'\n        }\n        return styles;\n    };\n\n      createCustomClearButton = (onClick) => {\n        return (\n          <button className='btn btn-info' style = {this.ColorBlock()} onClick={ onClick }>Clean</button>\n        );\n      }\n\n    createCustomModalHeader(onClose, onSave) {\n        const headerStyle = {\n          fontWeight: 'bold',\n          fontSize: 'large',\n          textAlign: 'center',\n          backgroundColor: '#eeeeee'\n        };\n        return (\n          <div className='modal-header' style={ headerStyle }>\n            <h3>Add Employee</h3>\n            <button className='btn btn-info' onClick={ onClose }>Close it!</button>\n          </div>\n        );\n      }\n    \n    \n    render() { \n    \nconst cellEditProp = {\n  mode: 'click',\n  blurToSave: true,\n  beforeSaveCell: onBeforeSaveCell, // a hook for before saving cell\n  afterSaveCell: onAfterSaveCell  // a hook for after saving cell\n};\n          \n          const selectRowProp = {\n            mode: 'checkbox',\n            clickToSelect: true,\n            //unselectable: [ 1, 3 ],\n            showOnlySelected: true,\n            selected: [2],\n            onSelect: onRowSelect,\n            onSelectAll: onSelectAll,\n            bgColor: function(row, isSelect) {\n                return 'yellow';\n                // if (isSelect) {\n                //   const { id } = row;\n                //   if (id < 5) return 'yellow';\n                //   else if (id < 4) return 'red';\n                //   else return 'yellow';\n                // }\n                // return null;\n              }\n          };\n\n          let classes = \"table table-sm table-striped table-hover table-bordered\";\n\n        return ( \n            <div className=\"table-responsive-sm\">\n                {/* <button onClick={ this.handleBtnClick } className='btn btn-default'>Click to apply text filter</button> */}\n              <BootstrapTable selectRow={ selectRowProp }\n                                tableHeaderClass={this.classes}\n                                trClassName={this.classes}\n                                TableHeaderColumn = {this.classes}\n                                tableBodyClass={this.classes}\n                                containerClass={this.classes}\n                                tableContainerClass={this.classes}\n                               \n                                headerContainerClass={this.classes}\n                                bodyContainerClass={this.classes}\n                                cellEdit={ cellEditProp }   multiColumnSort={ 2 }\n                                options={ this.options } search={ true }\n                                deleteRow={ true } insertRow={ true }\n                                data={this.props.data} striped hover  pagination >\n                <TableHeaderColumn autoValue={ true } width='90'  tdStyle={ { whiteSpace: 'normal' } } thStyle={ { 'fontWeight': 'lighter' } } headerAlign='center' dataAlign='center' isKey dataField='id' caretRender={ getCaret } dataSort>Employee ID</TableHeaderColumn>\n                {/* <TableHeaderColumn  hiddenOnInsert                 width='200' tdStyle={ { whiteSpace: 'normal' } } thStyle={ { 'fontWeight': 'lighter' } } headerAlign='center' dataAlign='center' filter={ { type: 'TextFilter', delay: 500 }} dataField='name' dataSort>Employee Name</TableHeaderColumn> */}\n                <TableHeaderColumn                   width='200' tdStyle={ { whiteSpace: 'normal' } } thStyle={ { 'fontWeight': 'lighter' } } headerAlign='center' dataAlign='center' filter={ { type: 'TextFilter', delay: 500 }} dataField='name' dataSort>Employee Name</TableHeaderColumn>\n                <TableHeaderColumn                    width='150' tdStyle={ { whiteSpace: 'normal' } } thStyle={ { 'fontWeight': 'lighter' } } headerAlign='center' dataAlign='center' filter={ { type: 'NumberFilter', delay: 1000, numberComparators: [ '=', '>', '<=' ] } } dataField='name' dataSort>Employee Age</TableHeaderColumn>\n                <TableHeaderColumn                    width='150' dataField='active' editable={ { type: 'checkbox', options: { values: 'Active:InActive' } } }>Active</TableHeaderColumn>\n                 </BootstrapTable>\n                 </div>\n         );\n    }\n}\n \nexport  default rowTable;"]},"metadata":{},"sourceType":"module"}